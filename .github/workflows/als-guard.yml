name: ALS-Guard

on:
  pull_request:
    paths:
      - "OPT-IN FRAMEWORK/O-ORGANIZATION/ATA_04-AIRWORTHINESS_LIMITATIONS/**"
  push:
    branches:
      - main
    paths:
      - "OPT-IN FRAMEWORK/O-ORGANIZATION/ATA_04-AIRWORTHINESS_LIMITATIONS/**"

jobs:
  validate-als:
    runs-on: ubuntu-latest
    name: Validate ALS Documents
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install pyyaml jsonschema
          
      - name: Validate metadata sidecars against schema
        run: |
          echo "Validating ALS metadata sidecars..."
          python ci/validate_meta.py \
            --schema "OPT-IN FRAMEWORK/O-ORGANIZATION/ATA_04-AIRWORTHINESS_LIMITATIONS/schemas/meta_v1_1.json" \
            "OPT-IN FRAMEWORK/O-ORGANIZATION/ATA_04-AIRWORTHINESS_LIMITATIONS"
        continue-on-error: false
        
      - name: Verify CDCCL internal links
        run: |
          echo "Verifying CDCCL document links..."
          python ci/check_links.py \
            "OPT-IN FRAMEWORK/O-ORGANIZATION/ATA_04-AIRWORTHINESS_LIMITATIONS/03-FUEL_SYSTEM_LIMITATIONS_CDCCL"
        continue-on-error: true
        
      - name: Verify CSV headers in traceability matrix
        run: |
          echo "Verifying traceability matrix CSV headers..."
          python ci/check_csv_headers.py \
            "OPT-IN FRAMEWORK/O-ORGANIZATION/ATA_04-AIRWORTHINESS_LIMITATIONS/05-CERTIFICATION_BASIS_AND_TRACEABILITY/TRACE_Matrix-ALS-To-Certification-Basis.csv"
        continue-on-error: false
        
      - name: Check for mandatory documents
        run: |
          echo "Checking for mandatory ALS documents..."
          BASE_DIR="OPT-IN FRAMEWORK/O-ORGANIZATION/ATA_04-AIRWORTHINESS_LIMITATIONS"
          
          REQUIRED_FILES=(
            "$BASE_DIR/00_README.md"
            "$BASE_DIR/INDEX.meta.yaml"
            "$BASE_DIR/schemas/meta_v1_1.json"
            "$BASE_DIR/05-CERTIFICATION_BASIS_AND_TRACEABILITY/TRACE_Matrix-ALS-To-Certification-Basis.csv"
          )
          
          MISSING=0
          for FILE in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$FILE" ]; then
              echo "  ✗ Missing required file: $FILE"
              MISSING=$((MISSING + 1))
            else
              echo "  ✓ Found: $FILE"
            fi
          done
          
          if [ $MISSING -gt 0 ]; then
            echo ""
            echo "✗ $MISSING required file(s) missing"
            exit 1
          else
            echo ""
            echo "✓ All required files present"
          fi
        
      - name: Verify ALS document checksums
        run: |
          echo "Verifying checksums in metadata match actual files..."
          BASE_DIR="OPT-IN FRAMEWORK/O-ORGANIZATION/ATA_04-AIRWORTHINESS_LIMITATIONS"
          
          CHECKSUM_ERRORS=0
          
          # Find all .meta.yaml files (excluding INDEX.meta.yaml)
          while IFS= read -r META_FILE; do
            # Get the corresponding document file
            DOC_FILE="${META_FILE%.meta.yaml}"
            
            if [ -f "$DOC_FILE" ]; then
              # Use Python to extract checksum from YAML
              EXPECTED_CHECKSUM=$(python3 -c "import yaml; data = yaml.safe_load(open('$META_FILE')); print(data.get('integrity', {}).get('checksum', {}).get('value', ''))")
              ACTUAL_CHECKSUM=$(sha256sum "$DOC_FILE" | awk '{print $1}')
              
              if [ "$EXPECTED_CHECKSUM" = "$ACTUAL_CHECKSUM" ]; then
                echo "  ✓ Checksum valid: $(basename "$DOC_FILE")"
              else
                echo "  ✗ Checksum mismatch: $(basename "$DOC_FILE")"
                echo "    Expected: $EXPECTED_CHECKSUM"
                echo "    Actual:   $ACTUAL_CHECKSUM"
                CHECKSUM_ERRORS=$((CHECKSUM_ERRORS + 1))
              fi
            else
              echo "  ⚠ Document file not found for: $(basename "$META_FILE")"
            fi
          done < <(find "$BASE_DIR" -name "*.meta.yaml" ! -name "INDEX.meta.yaml")
          
          if [ $CHECKSUM_ERRORS -gt 0 ]; then
            echo ""
            echo "✗ Found $CHECKSUM_ERRORS checksum mismatches"
            exit 1
          fi
        continue-on-error: true
        
      - name: Validate ALS document IDs match filenames
        run: |
          echo "Validating ALS document IDs match filenames..."
          BASE_DIR="OPT-IN FRAMEWORK/O-ORGANIZATION/ATA_04-AIRWORTHINESS_LIMITATIONS"
          
          MISMATCHES=0
          
          while IFS= read -r META_FILE; do
            # Use Python to extract ID from YAML
            ID=$(python3 -c "import yaml; data = yaml.safe_load(open('$META_FILE')); print(data.get('id', ''))")
            
            # Extract ID from filename
            BASENAME=$(basename "$META_FILE" .md.meta.yaml)
            FILENAME_ID=$(echo "$BASENAME" | cut -d'_' -f1-3)
            
            if [ "$ID" = "$FILENAME_ID" ]; then
              echo "  ✓ ID matches filename: $ID"
            else
              echo "  ✗ ID mismatch in $(basename "$META_FILE")"
              echo "    Metadata ID: $ID"
              echo "    Filename ID: $FILENAME_ID"
              MISMATCHES=$((MISMATCHES + 1))
            fi
          done < <(find "$BASE_DIR" -name "*.meta.yaml" ! -name "INDEX.meta.yaml")
          
          if [ $MISMATCHES -gt 0 ]; then
            echo ""
            echo "✗ Found $MISMATCHES ID mismatches"
            exit 1
          fi
        continue-on-error: true
        
      - name: Summary
        if: always()
        run: |
          echo "::notice::ALS documentation validation complete"
          echo "Review any warnings or errors above for compliance issues"
          echo ""
          echo "ALS Guard validates:"
          echo "  • Metadata schema compliance"
          echo "  • Document checksums"
          echo "  • Document ID consistency"
          echo "  • Required file presence"
          echo "  • CSV header structure"
